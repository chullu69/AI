#DFS
def dfs(graph, start):
    visited = set()  # To keep track of visited nodes
    stack = [start]  # Initialize stack with the start node

    while stack:
        node = stack.pop()  # Get the last added node
        if node not in visited:
            print(node)  # Process the current node (e.g., print it)
            visited.add(node)  # Mark the node as visited
            # Add all unvisited neighbors to the stack
            for neighbor in graph[node]:
                if neighbor not in visited:
                    stack.append(neighbor)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Starting DFS from node 'A'
dfs(graph, 'A')








#BFS
from collections import deque

def bfs(graph, start):
    visited = set()  # To keep track of visited nodes
    queue = deque([start])  # Initialize queue with the start node

    while queue:
        node = queue.popleft()  # Get the first node in the queue
        if node not in visited:
            print(node)  # Process the current node (e.g., print it)
            visited.add(node)  # Mark the node as visited
            # Add all unvisited neighbors to the queue
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Starting BFS from node 'A'
bfs(graph, 'A')

