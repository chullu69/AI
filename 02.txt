from collections import deque

class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        return self.adjacency_list[v]

    def h(self, n):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1
        }
        return H[n]

    def a_star_algorithm(self, start_node, stop_node):
        open_list = set([start_node])
        closed_list = set([])
        g = {}
        g[start_node] = 0
        parents = {}
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None

            for v in open_list:
                if n is None or (g[v] + self.h(v) < g[n] + self.h(n)):
                    n = v

            if n is None:
                print('Path does not exist!')
                return None

            if n == stop_node:
                reconst_path = []
                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]
                reconst_path.append(start_node)
                reconst_path.reverse()
                print('Path found: {}'.format(reconst_path))
                return reconst_path

            for (m, weight) in self.get_neighbors(n):
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)
            open_list.remove(n)
            closed_list.add(n)

        print('Path does not exist!')
        return None

adjacency_list = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}

graph1 = Graph(adjacency_list)
graph1.a_star_algorithm('A', 'D')
#o(b^d)







## 8-PUZZLE
import heapq

# Define the goal state for the 8 puzzle problem
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the blank space

# Helper function to find the position of 0 (blank space) in the puzzle
def find_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Calculate the Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x, target_y = (value - 1) // 3, (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance

# Generate the possible moves
def get_neighbors(state):
    neighbors = []
    x, y = find_blank_position(state)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
    
    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            # Swap blank space with the neighboring tile
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    
    return neighbors

# Define the A* search function
def a_star(initial_state):
    open_list = []
    closed_set = set()
    
    # Initialize with the initial state
    heapq.heappush(open_list, (manhattan_distance(initial_state), 0, initial_state, []))
    
    while open_list:
        _, cost, state, path = heapq.heappop(open_list)
        
        # Check if we reached the goal state
        if state == goal_state:
            return path + [state]
        
        # Add current state to closed set
        closed_set.add(tuple(tuple(row) for row in state))
        
        # Explore neighbors
        for neighbor in get_neighbors(state):
            if tuple(tuple(row) for row in neighbor) not in closed_set:
                new_path = path + [state]
                new_cost = cost + 1
                heuristic = manhattan_distance(neighbor)
                heapq.heappush(open_list, (new_cost + heuristic, new_cost, neighbor, new_path))
    
    return None  # No solution found

# Print the solution path
def print_solution(path):
    if path is None:
        print("No solution found.")
    else:
        for step in path:
            for row in step:
                print(row)
            print("-" * 9)

# Initial state of the puzzle
initial_state = [[1, 2, 3],
                 [4, 0, 6],
                 [7, 5, 8]]

# Run A* search and print the solution
solution_path = a_star(initial_state)
print_solution(solution_path)
