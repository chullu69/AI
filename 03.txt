##Alpha Beta
# Define a simple Node class for the game tree
class Node:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children or []

# Alpha-beta pruning algorithm
def alpha_beta(node, depth, alpha, beta, is_maximizing_player):
    if depth == 0 or not node.children:
        return node.value

    if is_maximizing_player:
        best_value = float("-inf")
        for child in node.children:
            child_value = alpha_beta(child, depth - 1, alpha, beta, False)
            best_value = max(best_value, child_value)
            alpha = max(alpha, best_value)
            if beta <= alpha:
                break  # Prune the subtree
        return best_value
    else:
        best_value = float("inf")
        for child in node.children:
            child_value = alpha_beta(child, depth - 1, alpha, beta, True)
            best_value = min(best_value, child_value)
            beta = min(beta, best_value)
            if beta <= alpha:
                break  # Prune the subtree
        return best_value

# Example usage
root = Node(None, [Node(3, [Node(5), Node(2), Node(9)]), Node(6, [Node(8), Node(4), Node(7)])])
best_value = alpha_beta(root, 3, float("-inf"), float("inf"), True)
print("Best value:", best_value)

#o(b^n/2)







##MINIMAX
MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]

    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best

    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best

def main():
    values = [3, 5, 6, 9, 1, 2, 0, -1]

    while True:
        print("Menu:")
        print("1. Find the optimal value")
        print("2. Exit")
        choice = int(input("Enter your choice: "))

        if choice == 1:
            print("The optimal value is:", minimax(0, 0, True, values, MIN, MAX))
        elif choice == 2:
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    main()
