##Alpha Beta
# Define a simple Node class for the game tree
class Node:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children or []

# Alpha-beta pruning algorithm
def alpha_beta(node, depth, alpha, beta, is_maximizing_player):
    if depth == 0 or not node.children:
        return node.value

    if is_maximizing_player:
        best_value = float("-inf")
        for child in node.children:
            child_value = alpha_beta(child, depth - 1, alpha, beta, False)
            best_value = max(best_value, child_value)
            alpha = max(alpha, best_value)
            if beta <= alpha:
                break  # Prune the subtree
        return best_value
    else:
        best_value = float("inf")
        for child in node.children:
            child_value = alpha_beta(child, depth - 1, alpha, beta, True)
            best_value = min(best_value, child_value)
            beta = min(beta, best_value)
            if beta <= alpha:
                break  # Prune the subtree
        return best_value

# Example usage
root = Node(None, [Node(3, [Node(5), Node(2), Node(9)]), Node(6, [Node(8), Node(4), Node(7)])])
best_value = alpha_beta(root, 3, float("-inf"), float("inf"), True)
print("Best value:", best_value)

#o(b^n/2)







##MINIMAX
MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]

    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best

    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best

def main():
    values = [3, 5, 6, 9, 1, 2, 0, -1]

    while True:
        print("Menu:")
        print("1. Find the optimal value")
        print("2. Exit")
        choice = int(input("Enter your choice: "))

        if choice == 1:
            print("The optimal value is:", minimax(0, 0, True, values, MIN, MAX))
        elif choice == 2:
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    main()







##TIC-TAC-TOE
import math

# Initialize the board
board = [' ' for _ in range(9)]

# Function to print the board
def print_board():
    for row in [board[i * 3:(i + 1) * 3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

# Check if the current board state has a winner
def check_winner(b, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
                      (0, 4, 8), (2, 4, 6)]             # diagonals
    return any(b[i] == b[j] == b[k] == player for i, j, k in win_conditions)

# Check if the board is full (draw)
def is_draw():
    return ' ' not in board

# Minimax algorithm with Alpha-Beta Pruning
def minimax(b, depth, is_maximizing, alpha=-math.inf, beta=math.inf):
    if check_winner(b, 'O'):
        return 1
    if check_winner(b, 'X'):
        return -1
    if is_draw():
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if b[i] == ' ':
                b[i] = 'O'
                eval = minimax(b, depth + 1, False, alpha, beta)
                b[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if b[i] == ' ':
                b[i] = 'X'
                eval = minimax(b, depth + 1, True, alpha, beta)
                b[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

# Get the best move for the AI
def best_move():
    best_score = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    return move

# Main game loop
def play_game():
    print("Welcome to Tic Tac Toe!")
    print_board()

    while True:
        # Player's move
        player_move = int(input("Enter your move (1-9): ")) - 1
        if board[player_move] != ' ':
            print("Invalid move, try again.")
            continue
        board[player_move] = 'X'
        print_board()

        # Check if player won
        if check_winner(board, 'X'):
            print("Congratulations! You win!")
            break
        if is_draw():
            print("It's a draw!")
            break

        # AI's move
        print("AI's turn...")
        ai_move = best_move()
        board[ai_move] = 'O'
        print_board()

        # Check if AI won
        if check_winner(board, 'O'):
            print("AI wins! Better luck next time.")
            break
        if is_draw():
            print("It's a draw!")
            break

# Start the game
play_game()
